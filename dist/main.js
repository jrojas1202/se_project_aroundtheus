!function(){"use strict";class e{constructor(e,t){let{items:s,renderer:r}=e;this._items=s,this._renderer=r,this._container=t}renderItems(){console.log(this._items),this._items.forEach((e=>{this._renderer(e)}))}addItem(e){this._container.prepend(e)}}class t{constructor(e,t,s,r){let{name:n,link:o,_id:i}=e;this._name=n,this._link=o,this._id=i,this._cardSelector=t,this._cardElement=this._getTemplate(),this._cardLikeButton=this._cardElement.querySelector(".card__like-button"),this._cardDeleteButton=this._cardElement.querySelector(".card__delete-button"),this._handleDeleteCardClick=r,this._cardImage=this._cardElement.querySelector(".card__image"),this._handleImageClick=s,this._setEventListeners()}getId(){return this._id}_setEventListeners(){this._cardLikeButton.addEventListener("click",(()=>{this._handleLikeIcon()})),this._cardDeleteButton.addEventListener("click",(()=>{this._handleDeleteCardClick(this._id)})),this._cardImage.addEventListener("click",(()=>{this._handleImageClick({name:this._name,link:this._link})}))}_handleLikeIcon(){this._cardLikeButton.classList.toggle("card__like-button_active")}_handleDeleteCard(){this._cardElement.remove()}_getTemplate(){return document.querySelector(this._cardSelector).content.querySelector(".card").cloneNode(!0)}getView(){return this._cardImage.src=this._link,this._cardImage.alt=this._name,this._cardElement.querySelector(".card__title").textContent=this._name,this._cardElement}}class s{constructor(e){this._popupElement=document.querySelector(e),this._popupCloseButton=this._popupElement.querySelector(".modal__close")}open(){this._popupElement.classList.add("modal_opened"),document.addEventListener("keydown",this._handleEscClose)}close(){this._popupElement.classList.remove("modal_opened"),document.removeEventListener("keydown",this._handleEscClose)}_handleEscClose=e=>{"Escape"===e.key&&this.close()};setEventListeners(){this._popupCloseButton.addEventListener("click",(()=>{this.close()})),this._popupElement.addEventListener("mousedown",(e=>{e.target.classList.contains("modal")&&this.close()}))}}class r extends s{constructor(e,t){super(e),this._form=this._popupElement.querySelector(".modal__form"),this._handleFormSubmit=t}_getInputValues(){const e={};return this._form.querySelectorAll(".modal__input").forEach((t=>{e[t.name]=t.value})),e}setEventListeners(){super.setEventListeners(),this._form.addEventListener("submit",this._submitHandler)}_submitHandler=e=>{e.preventDefault();const t=this._getInputValues();this._handleFormSubmit(t)};close(){super.close(),this._form.reset()}}var n=class{constructor(e,t){this._formSelector=e.formSelector,this.inputSelector=e.inputSelector,this._submitButtonSelector=e.submitButtonSelector,this._inactiveButtonClass=e.inactiveButtonClass,this._inputErrorClass=e._inputErrorClass,this._errorClass=e._errorClass,this._form=t}_showInputError(e){const t=this._form.querySelector(`#${e.id}-error`);e.classList.add(this._inputErrorClass),t.textContent=e.validationMessage,t.classList.add(this._errorClass)}_hideInputError(e){const t=this._form.querySelector(`#${e.id}-error`);e.classList.remove(this._inputErrorClass),t.textContent="",t.classList.remove(this._errorClass)}_checkInputValidity(e){if(!e.validity.valid)return this._showInputError(e);this._hideInputError(e)}_hasInvalidInput(e){return!this._inputElements.every((e=>e.validity.valid))}_disableButton(){this._submitButton.disabled=!0,this._submitButton.classList.add(this._inactiveButtonClass)}_enableButton(){this._submitButton.disabled=!1,this._submitButton.classList.remove(this._inactiveButtonClass)}_toggleButtonState(){if(this._hasInvalidInput())return this._disableButton();this._enableButton()}resetValidation(){this._inputElements.forEach((e=>{this._hideInputError(e)})),this._disableButton()}_setEventListeners(){this._inputElements=[...this._form.querySelectorAll(this._inputSelector)],this._submitButton=this._form.querySelector(this._submitButtonSelector),this._inputElements.forEach((e=>{e.addEventListener("input",(()=>{this._checkInputValidity(e),this._toggleButtonState()}))}))}enableValidation(){this._form.addEventListener("submit",(e=>{e.preventDefault()})),this._setEventListeners()}};const o={formSelector:".modal__form",inputSelector:".modal__input",submitButtonSelector:".modal__button",inactiveButtonClass:"modal__button_disabled",inputErrorClass:"modal__error",errorClass:"modal__error_visible"};var i;i=o,[...document.querySelectorAll(i.formSelector)].forEach((e=>{e.addEventListener("submit",(e=>{e.preventDefault()})),function(e,t){const{inputSelector:s,submitButtonSelector:r}=t,n=[...e.querySelectorAll(s)],o=e.querySelector(r);n.forEach((s=>{s.addEventListener("input",(r=>{!function(e,t,s){t.validity.valid?function(e,t,s){let{inputErrorClass:r,errorClass:n}=s;const o=e.querySelector(`#${t.id}-error`);t.classList.remove(r),o&&(o.textContent="",o.classList.remove(n))}(e,t,s):function(e,t,s){let{inputErrorClass:r,errorClass:n}=s;const o=e.querySelector(`#${t.id}-error`);t.classList.add(r),o&&(o.textContent=t.validationMessage,o.classList.add(n))}(e,t,s)}(e,s,t),function(e,t,s){const{inactiveButtonClass:r}=s,n=(e=>e.every((e=>e.validity.valid)))(e);n?function(e,t){e.classList.remove(t),e.disabled=!1}(t,r):function(e,t){e.classList.add(t),e.disabled=!0}(t,r)}(n,o,t)}))}))}(e,i)}));const a=document.querySelector("#new-card-modal").querySelector(".modal__form"),l=document.querySelector("#profile-title-input"),c=document.querySelector("#profile-description-input"),d=document.querySelector(".cards__list"),u=document.querySelector(".profile__edit-button"),_=document.querySelector(".profile__add-button"),h=(document.querySelector(".modal__input-title"),document.querySelector(".modal__input-link"),document.querySelector("#new-card-modal"),document.querySelector("#profile-edit-modal").querySelector(".modal__form")),m=new class{constructor(e){let{baseUrl:t,authToken:s}=e;this._baseUrl=t,this._authToken=s}getCardList(){return fetch(`${this._baseUrl}/cards`,{headers:{authorization:this._authToken}}).then((e=>e.ok?e.json():Promise.reject(`Error: ${e.status}`))).catch((e=>{console.error(e)}))}getUserInfo(){return fetch(`${this._baseUrl}/users/me`,{headers:{authorization:this._authToken}}).then((e=>e.ok?e.json():Promise.reject(`Error: ${e.status}`))).catch((e=>{console.error(e)}))}addCard(e){let{name:t,link:s}=e;return fetch(`${this._baseUrl}/cards`,{method:"POST",headers:{authorization:this._authToken,"Content-Type":"application/json"},body:JSON.stringify({name:t,link:s})}).then((e=>e.ok?e.json():Promise.reject(`Error: ${e.status}`))).catch((e=>{console.error(e)}))}removeCard(e){return fetch(`${this._baseUrl}/cards/${e}`,{method:"DELETE",headers:{authorization:this._authToken,"Content-Type":"application/json"}}).then((e=>e.ok?e.json():Promise.reject(`Error: ${e.status}`))).catch((e=>{console.error(e)}))}}({baseUrl:"https://around-api.en.tripleten-services.com/v1",authToken:"92f7ebfa-9e8e-4fb8-b0a3-1cdaa15ccbe0"});let p;function E(e){const s=new t(e,"#card-template",f,(e=>function(e,t){m.removeCard(e).then((e=>{t._handleDeleteCard()}))}(e,s)));return s.getView()}function f(e){S.open(e)}m.getCardList().then((t=>{console.log(t),p=new e({items:t,renderer:e=>{const t=E(e);p.addItem(t)}},d),p.renderItems()}));const v=new class{constructor(e){this.nameElement=document.querySelector(e.userNameSelector),this.jobElement=document.querySelector(e.userTitleSelector)}getUserInfo(){return{name:this.nameElement.textContent,job:this.jobElement.textContent}}setUserInfo(e){this.nameElement.textContent=e.name,this.jobElement.textContent=e.job}}({userNameSelector:".profile__title",userTitleSelector:".profile__description"});m.getUserInfo().then((e=>{v.setUserInfo({name:e.name,job:e.about})}));const S=new class extends s{constructor(e){super(e),this._containerImage=this._popupElement.querySelector(".modal__container-image"),this._containerImageTitle=this._popupElement.querySelector(".modal__image_title")}open(e){let{name:t,link:s}=e;const r=this._containerImage.querySelector(".modal__image");this._containerImageTitle.textContent=t,r.alt=t,r.src=s,super.open()}}("#image-modal",(function(e){S.open(e)}));S.setEventListeners();const b=new r("#profile-edit-modal",(function(e){v.setUserInfo(e),b.close()}));b.setEventListeners(),u.addEventListener("click",(()=>{!function(){const e=v.getUserInfo();l.value=e.name,c.value=e.job,b.open()}()}));const y=new r("#new-card-modal",(function(e){m.addCard(e).then((e=>{const t=E(e);p.addItem(t),y.close()}))}));y.setEventListeners(),_.addEventListener("click",(()=>{C.resetValidation(),y.open()})),new n(o,h).enableValidation();const C=new n(o,a);C.enableValidation()}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUFpQixTQUFTLEtBQ3RDa0osRUFBcUIzRSxrQkFDckJ5RSxFQUFhL0gsTUFBTSxJQWFZLElBQUlrSSxFQUNuQ3pFLEVBQ0FxQixHQUV1QnRCLG1CQUV6QixNQUFNeUUsRUFBdUIsSUFBSUMsRUFBY3pFLEVBQW9CZSxHQUNuRXlELEVBQXFCekUsa0IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wcmFjdGljdW0vLi9zcmMvY29tcG9uZW50cy9TZWN0aW9uLmpzIiwid2VicGFjazovL3ByYWN0aWN1bS8uL3NyYy9jb21wb25lbnRzL0NhcmQuanMiLCJ3ZWJwYWNrOi8vcHJhY3RpY3VtLy4vc3JjL2NvbXBvbmVudHMvUG9wdXAuanMiLCJ3ZWJwYWNrOi8vcHJhY3RpY3VtLy4vc3JjL2NvbXBvbmVudHMvUG9wdXBXaXRoRm9ybS5qcyIsIndlYnBhY2s6Ly9wcmFjdGljdW0vLi9zcmMvY29tcG9uZW50cy9Gb3JtVmFsaWRhdG9yLmpzIiwid2VicGFjazovL3ByYWN0aWN1bS8uL3NyYy9zY3JpcHRzL3ZhbGlkYXRpb24uanMiLCJ3ZWJwYWNrOi8vcHJhY3RpY3VtLy4vc3JjL3V0aWxzL2NvbnN0YW50LmpzIiwid2VicGFjazovL3ByYWN0aWN1bS8uL3NyYy9wYWdlcy9pbmRleC5qcyIsIndlYnBhY2s6Ly9wcmFjdGljdW0vLi9zcmMvY29tcG9uZW50cy9BcGkuanMiLCJ3ZWJwYWNrOi8vcHJhY3RpY3VtLy4vc3JjL2NvbXBvbmVudHMvVXNlckluZm8uanMiLCJ3ZWJwYWNrOi8vcHJhY3RpY3VtLy4vc3JjL2NvbXBvbmVudHMvUG9wdXBXaXRoSW1hZ2UuanMiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQgY2xhc3MgU2VjdGlvbiB7XHJcbiAgY29uc3RydWN0b3IoeyBpdGVtcywgcmVuZGVyZXIgfSwgY29udGFpbmVyKSB7XHJcbiAgICB0aGlzLl9pdGVtcyA9IGl0ZW1zO1xyXG4gICAgdGhpcy5fcmVuZGVyZXIgPSByZW5kZXJlcjtcclxuICAgIHRoaXMuX2NvbnRhaW5lciA9IGNvbnRhaW5lcjtcclxuICB9XHJcblxyXG4gIHJlbmRlckl0ZW1zKCkge1xyXG4gICAgY29uc29sZS5sb2codGhpcy5faXRlbXMpO1xyXG4gICAgdGhpcy5faXRlbXMuZm9yRWFjaCgoaXRlbSkgPT4ge1xyXG4gICAgICB0aGlzLl9yZW5kZXJlcihpdGVtKTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgYWRkSXRlbShpdGVtKSB7XHJcbiAgICB0aGlzLl9jb250YWluZXIucHJlcGVuZChpdGVtKTtcclxuICB9XHJcbn1cclxuIiwiZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ2FyZCB7XHJcbiAgY29uc3RydWN0b3IoXHJcbiAgICB7IG5hbWUsIGxpbmssIF9pZCB9LFxyXG4gICAgY2FyZFNlbGVjdG9yLFxyXG4gICAgaGFuZGxlSW1hZ2VDbGljayxcclxuICAgIGhhbmRsZURlbGV0ZUNhcmRDbGlja1xyXG4gICkge1xyXG4gICAgdGhpcy5fbmFtZSA9IG5hbWU7XHJcbiAgICB0aGlzLl9saW5rID0gbGluaztcclxuICAgIHRoaXMuX2lkID0gX2lkO1xyXG4gICAgdGhpcy5fY2FyZFNlbGVjdG9yID0gY2FyZFNlbGVjdG9yO1xyXG4gICAgdGhpcy5fY2FyZEVsZW1lbnQgPSB0aGlzLl9nZXRUZW1wbGF0ZSgpO1xyXG4gICAgdGhpcy5fY2FyZExpa2VCdXR0b24gPVxyXG4gICAgICB0aGlzLl9jYXJkRWxlbWVudC5xdWVyeVNlbGVjdG9yKFwiLmNhcmRfX2xpa2UtYnV0dG9uXCIpO1xyXG4gICAgdGhpcy5fY2FyZERlbGV0ZUJ1dHRvbiA9IHRoaXMuX2NhcmRFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXHJcbiAgICAgIFwiLmNhcmRfX2RlbGV0ZS1idXR0b25cIlxyXG4gICAgKTtcclxuICAgIHRoaXMuX2hhbmRsZURlbGV0ZUNhcmRDbGljayA9IGhhbmRsZURlbGV0ZUNhcmRDbGljaztcclxuICAgIHRoaXMuX2NhcmRJbWFnZSA9IHRoaXMuX2NhcmRFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuY2FyZF9faW1hZ2VcIik7XHJcbiAgICB0aGlzLl9oYW5kbGVJbWFnZUNsaWNrID0gaGFuZGxlSW1hZ2VDbGljaztcclxuICAgIHRoaXMuX3NldEV2ZW50TGlzdGVuZXJzKCk7XHJcbiAgfVxyXG5cclxuICBnZXRJZCgpIHtcclxuICAgIHJldHVybiB0aGlzLl9pZDtcclxuICB9XHJcblxyXG4gIF9zZXRFdmVudExpc3RlbmVycygpIHtcclxuICAgIHRoaXMuX2NhcmRMaWtlQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoKSA9PiB7XHJcbiAgICAgIHRoaXMuX2hhbmRsZUxpa2VJY29uKCk7XHJcbiAgICB9KTtcclxuXHJcbiAgICB0aGlzLl9jYXJkRGVsZXRlQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoKSA9PiB7XHJcbiAgICAgIHRoaXMuX2hhbmRsZURlbGV0ZUNhcmRDbGljayh0aGlzLl9pZCk7XHJcbiAgICB9KTtcclxuXHJcbiAgICB0aGlzLl9jYXJkSW1hZ2UuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpID0+IHtcclxuICAgICAgdGhpcy5faGFuZGxlSW1hZ2VDbGljayh7IG5hbWU6IHRoaXMuX25hbWUsIGxpbms6IHRoaXMuX2xpbmsgfSk7XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIF9oYW5kbGVMaWtlSWNvbigpIHtcclxuICAgIHRoaXMuX2NhcmRMaWtlQnV0dG9uLmNsYXNzTGlzdC50b2dnbGUoXCJjYXJkX19saWtlLWJ1dHRvbl9hY3RpdmVcIik7XHJcbiAgfVxyXG5cclxuICBfaGFuZGxlRGVsZXRlQ2FyZCgpIHtcclxuICAgIHRoaXMuX2NhcmRFbGVtZW50LnJlbW92ZSgpO1xyXG4gIH1cclxuXHJcbiAgX2dldFRlbXBsYXRlKCkge1xyXG4gICAgcmV0dXJuIGRvY3VtZW50XHJcbiAgICAgIC5xdWVyeVNlbGVjdG9yKHRoaXMuX2NhcmRTZWxlY3RvcilcclxuICAgICAgLmNvbnRlbnQucXVlcnlTZWxlY3RvcihcIi5jYXJkXCIpXHJcbiAgICAgIC5jbG9uZU5vZGUodHJ1ZSk7XHJcbiAgfVxyXG5cclxuICBnZXRWaWV3KCkge1xyXG4gICAgdGhpcy5fY2FyZEltYWdlLnNyYyA9IHRoaXMuX2xpbms7XHJcbiAgICB0aGlzLl9jYXJkSW1hZ2UuYWx0ID0gdGhpcy5fbmFtZTtcclxuICAgIHRoaXMuX2NhcmRFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuY2FyZF9fdGl0bGVcIikudGV4dENvbnRlbnQgPSB0aGlzLl9uYW1lO1xyXG5cclxuICAgIHJldHVybiB0aGlzLl9jYXJkRWxlbWVudDtcclxuICB9XHJcbn1cclxuIiwiZXhwb3J0IGNsYXNzIFBvcHVwIHtcclxuICBjb25zdHJ1Y3Rvcihwb3B1cFNlbGVjdG9yKSB7XHJcbiAgICB0aGlzLl9wb3B1cEVsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHBvcHVwU2VsZWN0b3IpO1xyXG4gICAgdGhpcy5fcG9wdXBDbG9zZUJ1dHRvbiA9IHRoaXMuX3BvcHVwRWxlbWVudC5xdWVyeVNlbGVjdG9yKFwiLm1vZGFsX19jbG9zZVwiKTtcclxuICB9XHJcblxyXG4gIG9wZW4oKSB7XHJcbiAgICB0aGlzLl9wb3B1cEVsZW1lbnQuY2xhc3NMaXN0LmFkZChcIm1vZGFsX29wZW5lZFwiKTtcclxuICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJrZXlkb3duXCIsIHRoaXMuX2hhbmRsZUVzY0Nsb3NlKTtcclxuICB9XHJcblxyXG4gIGNsb3NlKCkge1xyXG4gICAgdGhpcy5fcG9wdXBFbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoXCJtb2RhbF9vcGVuZWRcIik7XHJcbiAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKFwia2V5ZG93blwiLCB0aGlzLl9oYW5kbGVFc2NDbG9zZSk7XHJcbiAgfVxyXG5cclxuICBfaGFuZGxlRXNjQ2xvc2UgPSAoZXZlbnQpID0+IHtcclxuICAgIGlmIChldmVudC5rZXkgPT09IFwiRXNjYXBlXCIpIHtcclxuICAgICAgdGhpcy5jbG9zZSgpO1xyXG4gICAgfVxyXG4gIH07XHJcbiAgc2V0RXZlbnRMaXN0ZW5lcnMoKSB7XHJcbiAgICB0aGlzLl9wb3B1cENsb3NlQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoKSA9PiB7XHJcbiAgICAgIHRoaXMuY2xvc2UoKTtcclxuICAgIH0pO1xyXG4gICAgdGhpcy5fcG9wdXBFbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZWRvd25cIiwgKGV2dCkgPT4ge1xyXG4gICAgICBpZiAoZXZ0LnRhcmdldC5jbGFzc0xpc3QuY29udGFpbnMoXCJtb2RhbFwiKSkge1xyXG4gICAgICAgIHRoaXMuY2xvc2UoKTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgfVxyXG59XHJcbiIsImltcG9ydCB7IFBvcHVwIH0gZnJvbSBcIi4vUG9wdXAuanNcIjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFBvcHVwV2l0aEZvcm0gZXh0ZW5kcyBQb3B1cCB7XHJcbiAgY29uc3RydWN0b3IocG9wdXBTZWxlY3RvciwgaGFuZGxlRm9ybVN1Ym1pdCkge1xyXG4gICAgc3VwZXIocG9wdXBTZWxlY3Rvcik7XHJcbiAgICB0aGlzLl9mb3JtID0gdGhpcy5fcG9wdXBFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXCIubW9kYWxfX2Zvcm1cIik7XHJcbiAgICB0aGlzLl9oYW5kbGVGb3JtU3VibWl0ID0gaGFuZGxlRm9ybVN1Ym1pdDtcclxuICB9XHJcblxyXG4gIF9nZXRJbnB1dFZhbHVlcygpIHtcclxuICAgIGNvbnN0IHZhbHVlcyA9IHt9O1xyXG4gICAgdGhpcy5fZm9ybS5xdWVyeVNlbGVjdG9yQWxsKFwiLm1vZGFsX19pbnB1dFwiKS5mb3JFYWNoKChpbnB1dCkgPT4ge1xyXG4gICAgICB2YWx1ZXNbaW5wdXQubmFtZV0gPSBpbnB1dC52YWx1ZTtcclxuICAgIH0pO1xyXG4gICAgcmV0dXJuIHZhbHVlcztcclxuICB9XHJcblxyXG4gIHNldEV2ZW50TGlzdGVuZXJzKCkge1xyXG4gICAgc3VwZXIuc2V0RXZlbnRMaXN0ZW5lcnMoKTtcclxuICAgIHRoaXMuX2Zvcm0uYWRkRXZlbnRMaXN0ZW5lcihcInN1Ym1pdFwiLCB0aGlzLl9zdWJtaXRIYW5kbGVyKTtcclxuICB9XHJcblxyXG4gIF9zdWJtaXRIYW5kbGVyID0gKGV2dCkgPT4ge1xyXG4gICAgZXZ0LnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICBjb25zdCBpbnB1dFZhbHVlcyA9IHRoaXMuX2dldElucHV0VmFsdWVzKCk7XHJcbiAgICB0aGlzLl9oYW5kbGVGb3JtU3VibWl0KGlucHV0VmFsdWVzKTtcclxuICB9O1xyXG5cclxuICBjbG9zZSgpIHtcclxuICAgIHN1cGVyLmNsb3NlKCk7XHJcbiAgICB0aGlzLl9mb3JtLnJlc2V0KCk7XHJcbiAgfVxyXG59XHJcbiIsImNsYXNzIEZvcm1WYWxpZGF0b3Ige1xyXG4gIGNvbnN0cnVjdG9yKHNldHRpbmdzLCBmb3JtRWxlbWVudCkge1xyXG4gICAgdGhpcy5fZm9ybVNlbGVjdG9yID0gc2V0dGluZ3MuZm9ybVNlbGVjdG9yO1xyXG4gICAgdGhpcy5pbnB1dFNlbGVjdG9yID0gc2V0dGluZ3MuaW5wdXRTZWxlY3RvcjtcclxuICAgIHRoaXMuX3N1Ym1pdEJ1dHRvblNlbGVjdG9yID0gc2V0dGluZ3Muc3VibWl0QnV0dG9uU2VsZWN0b3I7XHJcbiAgICB0aGlzLl9pbmFjdGl2ZUJ1dHRvbkNsYXNzID0gc2V0dGluZ3MuaW5hY3RpdmVCdXR0b25DbGFzcztcclxuICAgIHRoaXMuX2lucHV0RXJyb3JDbGFzcyA9IHNldHRpbmdzLl9pbnB1dEVycm9yQ2xhc3M7XHJcbiAgICB0aGlzLl9lcnJvckNsYXNzID0gc2V0dGluZ3MuX2Vycm9yQ2xhc3M7XHJcblxyXG4gICAgdGhpcy5fZm9ybSA9IGZvcm1FbGVtZW50O1xyXG4gIH1cclxuXHJcbiAgX3Nob3dJbnB1dEVycm9yKGlucHV0RWxlbWVudCkge1xyXG4gICAgY29uc3QgZXJyb3JNZXNzYWdlRWxlbWVudCA9IHRoaXMuX2Zvcm0ucXVlcnlTZWxlY3RvcihcclxuICAgICAgYCMke2lucHV0RWxlbWVudC5pZH0tZXJyb3JgXHJcbiAgICApO1xyXG4gICAgaW5wdXRFbGVtZW50LmNsYXNzTGlzdC5hZGQodGhpcy5faW5wdXRFcnJvckNsYXNzKTtcclxuICAgIGVycm9yTWVzc2FnZUVsZW1lbnQudGV4dENvbnRlbnQgPSBpbnB1dEVsZW1lbnQudmFsaWRhdGlvbk1lc3NhZ2U7XHJcbiAgICBlcnJvck1lc3NhZ2VFbGVtZW50LmNsYXNzTGlzdC5hZGQodGhpcy5fZXJyb3JDbGFzcyk7XHJcbiAgfVxyXG5cclxuICBfaGlkZUlucHV0RXJyb3IoaW5wdXRFbGVtZW50KSB7XHJcbiAgICBjb25zdCBlcnJvck1lc3NhZ2VFbGVtZW50ID0gdGhpcy5fZm9ybS5xdWVyeVNlbGVjdG9yKFxyXG4gICAgICBgIyR7aW5wdXRFbGVtZW50LmlkfS1lcnJvcmBcclxuICAgICk7XHJcbiAgICBpbnB1dEVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZSh0aGlzLl9pbnB1dEVycm9yQ2xhc3MpO1xyXG4gICAgZXJyb3JNZXNzYWdlRWxlbWVudC50ZXh0Q29udGVudCA9IFwiXCI7XHJcbiAgICBlcnJvck1lc3NhZ2VFbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUodGhpcy5fZXJyb3JDbGFzcyk7XHJcbiAgfVxyXG5cclxuICBfY2hlY2tJbnB1dFZhbGlkaXR5KGlucHV0RWxlbWVudCkge1xyXG4gICAgaWYgKCFpbnB1dEVsZW1lbnQudmFsaWRpdHkudmFsaWQpIHtcclxuICAgICAgcmV0dXJuIHRoaXMuX3Nob3dJbnB1dEVycm9yKGlucHV0RWxlbWVudCk7XHJcbiAgICB9XHJcbiAgICB0aGlzLl9oaWRlSW5wdXRFcnJvcihpbnB1dEVsZW1lbnQpO1xyXG4gIH1cclxuXHJcbiAgX2hhc0ludmFsaWRJbnB1dChpbnB1dEVsZW1lbnRzKSB7XHJcbiAgICByZXR1cm4gIXRoaXMuX2lucHV0RWxlbWVudHMuZXZlcnkoXHJcbiAgICAgIChpbnB1dEVsZW1lbnQpID0+IGlucHV0RWxlbWVudC52YWxpZGl0eS52YWxpZFxyXG4gICAgKTtcclxuICB9XHJcblxyXG4gIF9kaXNhYmxlQnV0dG9uKCkge1xyXG4gICAgdGhpcy5fc3VibWl0QnV0dG9uLmRpc2FibGVkID0gdHJ1ZTtcclxuICAgIHRoaXMuX3N1Ym1pdEJ1dHRvbi5jbGFzc0xpc3QuYWRkKHRoaXMuX2luYWN0aXZlQnV0dG9uQ2xhc3MpO1xyXG4gIH1cclxuXHJcbiAgX2VuYWJsZUJ1dHRvbigpIHtcclxuICAgIHRoaXMuX3N1Ym1pdEJ1dHRvbi5kaXNhYmxlZCA9IGZhbHNlO1xyXG4gICAgdGhpcy5fc3VibWl0QnV0dG9uLmNsYXNzTGlzdC5yZW1vdmUodGhpcy5faW5hY3RpdmVCdXR0b25DbGFzcyk7XHJcbiAgfVxyXG5cclxuICBfdG9nZ2xlQnV0dG9uU3RhdGUoKSB7XHJcbiAgICBpZiAodGhpcy5faGFzSW52YWxpZElucHV0KCkpIHtcclxuICAgICAgcmV0dXJuIHRoaXMuX2Rpc2FibGVCdXR0b24oKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHRoaXMuX2VuYWJsZUJ1dHRvbigpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcmVzZXRWYWxpZGF0aW9uKCkge1xyXG4gICAgdGhpcy5faW5wdXRFbGVtZW50cy5mb3JFYWNoKChpbnB1dEVsZW1lbnQpID0+IHtcclxuICAgICAgdGhpcy5faGlkZUlucHV0RXJyb3IoaW5wdXRFbGVtZW50KTtcclxuICAgIH0pO1xyXG5cclxuICAgIHRoaXMuX2Rpc2FibGVCdXR0b24oKTtcclxuICB9XHJcblxyXG4gIF9zZXRFdmVudExpc3RlbmVycygpIHtcclxuICAgIHRoaXMuX2lucHV0RWxlbWVudHMgPSBbLi4udGhpcy5fZm9ybS5xdWVyeVNlbGVjdG9yQWxsKHRoaXMuX2lucHV0U2VsZWN0b3IpXTtcclxuICAgIHRoaXMuX3N1Ym1pdEJ1dHRvbiA9IHRoaXMuX2Zvcm0ucXVlcnlTZWxlY3Rvcih0aGlzLl9zdWJtaXRCdXR0b25TZWxlY3Rvcik7IC8vIG1vdmUgdG8gdGhlIGNvbnN0cnVjdG9yXHJcblxyXG4gICAgdGhpcy5faW5wdXRFbGVtZW50cy5mb3JFYWNoKChpbnB1dEVsZW1lbnQpID0+IHtcclxuICAgICAgaW5wdXRFbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJpbnB1dFwiLCAoKSA9PiB7XHJcbiAgICAgICAgdGhpcy5fY2hlY2tJbnB1dFZhbGlkaXR5KGlucHV0RWxlbWVudCk7XHJcbiAgICAgICAgdGhpcy5fdG9nZ2xlQnV0dG9uU3RhdGUoKTtcclxuICAgICAgfSk7XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIGVuYWJsZVZhbGlkYXRpb24oKSB7XHJcbiAgICB0aGlzLl9mb3JtLmFkZEV2ZW50TGlzdGVuZXIoXCJzdWJtaXRcIiwgKGV2dCkgPT4ge1xyXG4gICAgICBldnQucHJldmVudERlZmF1bHQoKTtcclxuICAgIH0pO1xyXG4gICAgdGhpcy5fc2V0RXZlbnRMaXN0ZW5lcnMoKTtcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IEZvcm1WYWxpZGF0b3I7XHJcbiIsIi8vRXJyb3IgRnVuY3Rpb25zXHJcblxyXG5mdW5jdGlvbiBzaG93SW5wdXRFcnJvcihcclxuICBmb3JtRWxlbWVudCxcclxuICBpbnB1dEVsZW1lbnQsXHJcbiAgeyBpbnB1dEVycm9yQ2xhc3MsIGVycm9yQ2xhc3MgfVxyXG4pIHtcclxuICBjb25zdCBlcnJvck1lc3NhZ2VFbGVtZW50ID0gZm9ybUVsZW1lbnQucXVlcnlTZWxlY3RvcihcclxuICAgIGAjJHtpbnB1dEVsZW1lbnQuaWR9LWVycm9yYFxyXG4gICk7XHJcblxyXG4gIGlucHV0RWxlbWVudC5jbGFzc0xpc3QuYWRkKGlucHV0RXJyb3JDbGFzcyk7XHJcblxyXG4gIGlmIChlcnJvck1lc3NhZ2VFbGVtZW50KSB7XHJcbiAgICBlcnJvck1lc3NhZ2VFbGVtZW50LnRleHRDb250ZW50ID0gaW5wdXRFbGVtZW50LnZhbGlkYXRpb25NZXNzYWdlO1xyXG4gICAgZXJyb3JNZXNzYWdlRWxlbWVudC5jbGFzc0xpc3QuYWRkKGVycm9yQ2xhc3MpO1xyXG4gIH1cclxufVxyXG5cclxuZnVuY3Rpb24gaGlkZUlucHV0RXJyb3IoXHJcbiAgZm9ybUVsZW1lbnQsXHJcbiAgaW5wdXRFbGVtZW50LFxyXG4gIHsgaW5wdXRFcnJvckNsYXNzLCBlcnJvckNsYXNzIH1cclxuKSB7XHJcbiAgY29uc3QgZXJyb3JNZXNzYWdlRWxlbWVudCA9IGZvcm1FbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXHJcbiAgICBgIyR7aW5wdXRFbGVtZW50LmlkfS1lcnJvcmBcclxuICApO1xyXG5cclxuICBpbnB1dEVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZShpbnB1dEVycm9yQ2xhc3MpO1xyXG5cclxuICBpZiAoZXJyb3JNZXNzYWdlRWxlbWVudCkge1xyXG4gICAgZXJyb3JNZXNzYWdlRWxlbWVudC50ZXh0Q29udGVudCA9IFwiXCI7XHJcbiAgICBlcnJvck1lc3NhZ2VFbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoZXJyb3JDbGFzcyk7XHJcbiAgfVxyXG59XHJcblxyXG4vLyBWQUxJREFUSU9OIE9GIElOUFVUXHJcblxyXG5mdW5jdGlvbiBjaGVja0lucHV0VmFsaWRpdHkoZm9ybUVsZW1lbnQsIGlucHV0RWxlbWVudCwgb3B0aW9ucykge1xyXG4gIGlmICghaW5wdXRFbGVtZW50LnZhbGlkaXR5LnZhbGlkKSB7XHJcbiAgICBzaG93SW5wdXRFcnJvcihmb3JtRWxlbWVudCwgaW5wdXRFbGVtZW50LCBvcHRpb25zKTtcclxuICB9IGVsc2Uge1xyXG4gICAgaGlkZUlucHV0RXJyb3IoZm9ybUVsZW1lbnQsIGlucHV0RWxlbWVudCwgb3B0aW9ucyk7XHJcbiAgfVxyXG59XHJcblxyXG5mdW5jdGlvbiBoYXNJbnZhbGlkSW5wdXQoaW5wdXRMaXN0KSB7XHJcbiAgcmV0dXJuICFpbnB1dExpc3QuZXZlcnkoKGlucHV0RWxlbWVudCkgPT4gaW5wdXRFbGVtZW50LnZhbGlkaXR5LnZhbGlkKTtcclxufVxyXG5cclxuLy8gZGlzYWJsZSBidXR0b24gZnVuY3Rpb25zXHJcbmZ1bmN0aW9uIGRpc2FibGVCdXR0b24oc3VibWl0QnV0dG9uLCBpbmFjdGl2ZUJ1dHRvbkNsYXNzKSB7XHJcbiAgc3VibWl0QnV0dG9uLmNsYXNzTGlzdC5hZGQoaW5hY3RpdmVCdXR0b25DbGFzcyk7XHJcbiAgc3VibWl0QnV0dG9uLmRpc2FibGVkID0gdHJ1ZTtcclxufVxyXG5cclxuLy8gZW5hYmxlIGJ1dHRvbiBmdW5jdGlvblxyXG5mdW5jdGlvbiBlbmFibGVCdXR0b24oc3VibWl0QnV0dG9uLCBpbmFjdGl2ZUJ1dHRvbkNsYXNzKSB7XHJcbiAgc3VibWl0QnV0dG9uLmNsYXNzTGlzdC5yZW1vdmUoaW5hY3RpdmVCdXR0b25DbGFzcyk7XHJcbiAgc3VibWl0QnV0dG9uLmRpc2FibGVkID0gZmFsc2U7XHJcbn1cclxuXHJcbi8vIFRPR0dMRSBCVVRUT05cclxuXHJcbmZ1bmN0aW9uIHRvZ2dsZUJ1dHRvblN0YXRlKGlucHV0RWxlbWVudHMsIHN1Ym1pdEJ1dHRvbiwgdmFsaWRhdGlvbkNvbmZpZykge1xyXG4gIGNvbnN0IHsgaW5hY3RpdmVCdXR0b25DbGFzcyB9ID0gdmFsaWRhdGlvbkNvbmZpZztcclxuXHJcbiAgY29uc3QgY2hlY2tGb3JtVmFsaWRpdHkgPSAoaW5wdXRFbGVtZW50cykgPT5cclxuICAgIGlucHV0RWxlbWVudHMuZXZlcnkoKGlucHV0RWxlbWVudCkgPT4gaW5wdXRFbGVtZW50LnZhbGlkaXR5LnZhbGlkKTtcclxuXHJcbiAgY29uc3QgaXNGb3JtVmFsaWQgPSBjaGVja0Zvcm1WYWxpZGl0eShpbnB1dEVsZW1lbnRzKTtcclxuICBpZiAoaXNGb3JtVmFsaWQpIHtcclxuICAgIGVuYWJsZUJ1dHRvbihzdWJtaXRCdXR0b24sIGluYWN0aXZlQnV0dG9uQ2xhc3MpO1xyXG4gIH0gZWxzZSB7XHJcbiAgICBkaXNhYmxlQnV0dG9uKHN1Ym1pdEJ1dHRvbiwgaW5hY3RpdmVCdXR0b25DbGFzcyk7XHJcbiAgfVxyXG59XHJcblxyXG4vLyBzZXRFdmVudExpc3RlbmVyIEZVTkNUSU9OXHJcblxyXG5mdW5jdGlvbiBzZXRFdmVudExpc3RlbmVycyhmb3JtRWxlbWVudCwgb3B0aW9ucykge1xyXG4gIGNvbnN0IHsgaW5wdXRTZWxlY3Rvciwgc3VibWl0QnV0dG9uU2VsZWN0b3IgfSA9IG9wdGlvbnM7XHJcbiAgY29uc3QgaW5wdXRFbGVtZW50cyA9IFsuLi5mb3JtRWxlbWVudC5xdWVyeVNlbGVjdG9yQWxsKGlucHV0U2VsZWN0b3IpXTtcclxuICBjb25zdCBzdWJtaXRCdXR0b24gPSBmb3JtRWxlbWVudC5xdWVyeVNlbGVjdG9yKHN1Ym1pdEJ1dHRvblNlbGVjdG9yKTtcclxuXHJcbiAgaW5wdXRFbGVtZW50cy5mb3JFYWNoKChpbnB1dEVsZW1lbnQpID0+IHtcclxuICAgIGlucHV0RWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwiaW5wdXRcIiwgKGV2dCkgPT4ge1xyXG4gICAgICBjaGVja0lucHV0VmFsaWRpdHkoZm9ybUVsZW1lbnQsIGlucHV0RWxlbWVudCwgb3B0aW9ucyk7XHJcbiAgICAgIHRvZ2dsZUJ1dHRvblN0YXRlKGlucHV0RWxlbWVudHMsIHN1Ym1pdEJ1dHRvbiwgb3B0aW9ucyk7XHJcbiAgICB9KTtcclxuICB9KTtcclxufVxyXG5cclxuZnVuY3Rpb24gZW5hYmxlVmFsaWRhdGlvbihvcHRpb25zKSB7XHJcbiAgY29uc3QgZm9ybUVsZW1lbnRzID0gWy4uLmRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwob3B0aW9ucy5mb3JtU2VsZWN0b3IpXTtcclxuICBmb3JtRWxlbWVudHMuZm9yRWFjaCgoZm9ybUVsZW1lbnQpID0+IHtcclxuICAgIGZvcm1FbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJzdWJtaXRcIiwgKGV2dCkgPT4ge1xyXG4gICAgICBldnQucHJldmVudERlZmF1bHQoKTtcclxuICAgIH0pO1xyXG4gICAgc2V0RXZlbnRMaXN0ZW5lcnMoZm9ybUVsZW1lbnQsIG9wdGlvbnMpO1xyXG4gIH0pO1xyXG59XHJcblxyXG4vLyBDb25maWdcclxuXHJcbmV4cG9ydCBjb25zdCB2YWxpZGF0aW9uU2V0dGluZ3MgPSB7XHJcbiAgZm9ybVNlbGVjdG9yOiBcIi5tb2RhbF9fZm9ybVwiLFxyXG4gIGlucHV0U2VsZWN0b3I6IFwiLm1vZGFsX19pbnB1dFwiLFxyXG4gIHN1Ym1pdEJ1dHRvblNlbGVjdG9yOiBcIi5tb2RhbF9fYnV0dG9uXCIsXHJcbiAgaW5hY3RpdmVCdXR0b25DbGFzczogXCJtb2RhbF9fYnV0dG9uX2Rpc2FibGVkXCIsXHJcbiAgaW5wdXRFcnJvckNsYXNzOiBcIm1vZGFsX19lcnJvclwiLFxyXG4gIGVycm9yQ2xhc3M6IFwibW9kYWxfX2Vycm9yX3Zpc2libGVcIixcclxufTtcclxuXHJcbmVuYWJsZVZhbGlkYXRpb24odmFsaWRhdGlvblNldHRpbmdzKTtcclxuXHJcbmV4cG9ydCBjb25zdCBhZGRDYXJkTW9kYWwgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI25ldy1jYXJkLW1vZGFsXCIpO1xyXG5leHBvcnQgY29uc3QgYWRkQ2FyZEZvcm0gPSBhZGRDYXJkTW9kYWwucXVlcnlTZWxlY3RvcihcIi5tb2RhbF9fZm9ybVwiKTtcclxuIiwiZXhwb3J0IGNvbnN0IHVzZXJOYW1lSW5wdXQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI3Byb2ZpbGUtdGl0bGUtaW5wdXRcIik7XHJcbmV4cG9ydCBjb25zdCB1c2VyRGVzY3JpcHRpb25JbnB1dCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXHJcbiAgXCIjcHJvZmlsZS1kZXNjcmlwdGlvbi1pbnB1dFwiXHJcbik7XHJcblxyXG4vLyBDQVJEU1xyXG5cclxuZXhwb3J0IGNvbnN0IGNhcmRzTGlzdCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuY2FyZHNfX2xpc3RcIik7XHJcblxyXG5leHBvcnQgY29uc3QgY2FyZFNlbGVjdG9yID0gXCIjY2FyZC10ZW1wbGF0ZVwiO1xyXG5cclxuZXhwb3J0IGNvbnN0IHByb2ZpbGVFZGl0QnV0dG9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcclxuICBcIi5wcm9maWxlX19lZGl0LWJ1dHRvblwiXHJcbik7XHJcblxyXG5leHBvcnQgY29uc3QgYWRkQ2FyZEJ1dHRvbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIucHJvZmlsZV9fYWRkLWJ1dHRvblwiKTtcclxuXHJcbmV4cG9ydCBjb25zdCBhZGRDYXJkVGl0bGVGaWVsZCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIubW9kYWxfX2lucHV0LXRpdGxlXCIpO1xyXG5leHBvcnQgY29uc3QgYWRkQ2FyZEltYWdlTGlua0ZpZWxkID1cclxuICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLm1vZGFsX19pbnB1dC1saW5rXCIpO1xyXG5cclxuZXhwb3J0IGNvbnN0IGNvbmZpZyA9IHtcclxuICBmb3JtU2VsZWN0b3I6IFwiLm1vZGFsX19mb3JtXCIsXHJcbiAgaW5wdXRTZWxlY3RvcjogXCIubW9kYWxfX2lucHV0XCIsXHJcbiAgc3VibWl0QnV0dG9uU2VsZWN0b3I6IFwiLm1vZGFsX19idXR0b25cIixcclxuICBpbmFjdGl2ZUJ1dHRvbkNsYXNzOiBcIm1vZGFsX19idXR0b25fZGlzYWJsZWRcIixcclxuICBpbnB1dEVycm9yQ2xhc3M6IFwibW9kYWxfX2Vycm9yXCIsXHJcbiAgZXJyb3JDbGFzczogXCJtb2RhbF9fZXJyb3JfdmlzaWJsZVwiLFxyXG59O1xyXG5cclxuZXhwb3J0IGNvbnN0IGFkZENhcmRNb2RhbCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjbmV3LWNhcmQtbW9kYWxcIik7XHJcbmV4cG9ydCBjb25zdCBwcm9maWxlRWRpdE1vZGFsID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNwcm9maWxlLWVkaXQtbW9kYWxcIik7XHJcbmV4cG9ydCBjb25zdCBwcm9maWxlRWRpdEZvcm0gPSBwcm9maWxlRWRpdE1vZGFsLnF1ZXJ5U2VsZWN0b3IoXCIubW9kYWxfX2Zvcm1cIik7XHJcbiIsImltcG9ydCBTZWN0aW9uIGZyb20gXCIuLi9jb21wb25lbnRzL1NlY3Rpb24uanNcIjtcclxuaW1wb3J0IENhcmQgZnJvbSBcIi4uL2NvbXBvbmVudHMvQ2FyZC5qc1wiO1xyXG5pbXBvcnQgcG9wdXBXaXRoSW1hZ2UgZnJvbSBcIi4uL2NvbXBvbmVudHMvUG9wdXBXaXRoSW1hZ2UuanNcIjtcclxuaW1wb3J0IFBvcHVwV2l0aEZvcm0gZnJvbSBcIi4uL2NvbXBvbmVudHMvUG9wdXBXaXRoRm9ybS5qc1wiO1xyXG5pbXBvcnQgVXNlckluZm8gZnJvbSBcIi4uL2NvbXBvbmVudHMvVXNlckluZm8uanNcIjtcclxuaW1wb3J0IEZvcm1WYWxpZGF0b3IgZnJvbSBcIi4uL2NvbXBvbmVudHMvRm9ybVZhbGlkYXRvci5qc1wiO1xyXG5pbXBvcnQgQXBpIGZyb20gXCIuLi9jb21wb25lbnRzL0FwaS5qc1wiO1xyXG5pbXBvcnQgXCIuL2luZGV4LmNzc1wiO1xyXG5pbXBvcnQge1xyXG4gIHZhbGlkYXRpb25TZXR0aW5ncyxcclxuICBhZGRDYXJkRm9ybSxcclxuICBhZGRDYXJkTW9kYWwsXHJcbn0gZnJvbSBcIi4uL3NjcmlwdHMvdmFsaWRhdGlvbi5qc1wiO1xyXG5pbXBvcnQge1xyXG4gIHVzZXJOYW1lSW5wdXQsXHJcbiAgdXNlckRlc2NyaXB0aW9uSW5wdXQsXHJcbiAgY2FyZHNMaXN0LFxyXG4gIGNhcmREYXRhLFxyXG4gIGNhcmRTZWxlY3RvcixcclxuICBwcm9maWxlRWRpdEJ1dHRvbixcclxuICBhZGRDYXJkQnV0dG9uLFxyXG4gIGFkZENhcmRUaXRsZUZpZWxkLFxyXG4gIGFkZENhcmRJbWFnZUxpbmtGaWVsZCxcclxuICBwcm9maWxlRWRpdE1vZGFsLFxyXG4gIHByb2ZpbGVFZGl0Rm9ybSxcclxufSBmcm9tIFwiLi4vdXRpbHMvY29uc3RhbnQuanNcIjtcclxuXHJcbmNvbnN0IGFwaSA9IG5ldyBBcGkoe1xyXG4gIGJhc2VVcmw6IFwiaHR0cHM6Ly9hcm91bmQtYXBpLmVuLnRyaXBsZXRlbi1zZXJ2aWNlcy5jb20vdjFcIixcclxuICBhdXRoVG9rZW46IFwiOTJmN2ViZmEtOWU4ZS00ZmI4LWIwYTMtMWNkYWExNWNjYmUwXCIsXHJcbn0pO1xyXG5cclxuLy9DQVJEIFNFQ1RJT05cclxubGV0IHNlY3Rpb247XHJcblxyXG5hcGkuZ2V0Q2FyZExpc3QoKS50aGVuKChjYXJkRGF0YSkgPT4ge1xyXG4gIGNvbnNvbGUubG9nKGNhcmREYXRhKTtcclxuICBzZWN0aW9uID0gbmV3IFNlY3Rpb24oXHJcbiAgICB7XHJcbiAgICAgIGl0ZW1zOiBjYXJkRGF0YSxcclxuICAgICAgcmVuZGVyZXI6IChjYXJkRGF0YSkgPT4ge1xyXG4gICAgICAgIGNvbnN0IGNhcmQgPSBjcmVhdGVDYXJkKGNhcmREYXRhKTtcclxuICAgICAgICBzZWN0aW9uLmFkZEl0ZW0oY2FyZCk7XHJcbiAgICAgIH0sXHJcbiAgICB9LFxyXG4gICAgY2FyZHNMaXN0XHJcbiAgKTtcclxuICBzZWN0aW9uLnJlbmRlckl0ZW1zKCk7XHJcbn0pO1xyXG5cclxuZnVuY3Rpb24gY3JlYXRlQ2FyZChjYXJkRGF0YSkge1xyXG4gIGNvbnN0IGNhcmQgPSBuZXcgQ2FyZChjYXJkRGF0YSwgY2FyZFNlbGVjdG9yLCBoYW5kbGVDYXJkQ2xpY2ssIChjYXJkSUQpID0+XHJcbiAgICBoYW5kbGVEZWxldGVDYXJkQ2xpY2soY2FyZElELCBjYXJkKVxyXG4gICk7XHJcbiAgcmV0dXJuIGNhcmQuZ2V0VmlldygpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBoYW5kbGVDYXJkQ2xpY2soY2FyZERhdGEpIHtcclxuICBwcmV2aWV3SW1hZ2VQb3B1cC5vcGVuKGNhcmREYXRhKTtcclxufVxyXG5cclxuZnVuY3Rpb24gaGFuZGxlRGVsZXRlQ2FyZENsaWNrKGNhcmRJRCwgY2FyZCkge1xyXG4gIGFwaS5yZW1vdmVDYXJkKGNhcmRJRCkudGhlbigocmVzKSA9PiB7XHJcbiAgICBjYXJkLl9oYW5kbGVEZWxldGVDYXJkKCk7XHJcbiAgfSk7XHJcbn1cclxuXHJcbi8vVVNFUiBJTkZPXHJcbmNvbnN0IHVzZXJJbmZvID0gbmV3IFVzZXJJbmZvKHtcclxuICB1c2VyTmFtZVNlbGVjdG9yOiBcIi5wcm9maWxlX190aXRsZVwiLFxyXG4gIHVzZXJUaXRsZVNlbGVjdG9yOiBcIi5wcm9maWxlX19kZXNjcmlwdGlvblwiLFxyXG59KTtcclxuXHJcbmFwaS5nZXRVc2VySW5mbygpLnRoZW4oKHVzZXIpID0+IHtcclxuICB1c2VySW5mby5zZXRVc2VySW5mbyh7XHJcbiAgICBuYW1lOiB1c2VyLm5hbWUsXHJcbiAgICBqb2I6IHVzZXIuYWJvdXQsXHJcbiAgfSk7XHJcbn0pO1xyXG5cclxuLy9Qb3BVcFdpdGhJbWFnZVxyXG5jb25zdCBwcmV2aWV3SW1hZ2VQb3B1cCA9IG5ldyBwb3B1cFdpdGhJbWFnZShcIiNpbWFnZS1tb2RhbFwiLCBoYW5kbGVJbWFnZUNsaWNrKTtcclxucHJldmlld0ltYWdlUG9wdXAuc2V0RXZlbnRMaXN0ZW5lcnMoKTtcclxuXHJcbmZ1bmN0aW9uIGhhbmRsZUltYWdlQ2xpY2soY2FyZERhdGEpIHtcclxuICBwcmV2aWV3SW1hZ2VQb3B1cC5vcGVuKGNhcmREYXRhKTtcclxufVxyXG5cclxuLy9Qb3BVcFdpdGhGb3JtXHJcbmNvbnN0IHByb2ZpbGVFZGl0UG9wdXAgPSBuZXcgUG9wdXBXaXRoRm9ybShcclxuICBcIiNwcm9maWxlLWVkaXQtbW9kYWxcIixcclxuICBoYW5kbGVFZGl0UHJvZmlsZVN1Ym1pdFxyXG4pO1xyXG5wcm9maWxlRWRpdFBvcHVwLnNldEV2ZW50TGlzdGVuZXJzKCk7XHJcbnByb2ZpbGVFZGl0QnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoKSA9PiB7XHJcbiAgaGFuZGxlUHJvZmlsZUVkaXRDbGljaygpO1xyXG59KTtcclxuXHJcbmZ1bmN0aW9uIGhhbmRsZVByb2ZpbGVFZGl0Q2xpY2soKSB7XHJcbiAgY29uc3QgdXNlciA9IHVzZXJJbmZvLmdldFVzZXJJbmZvKCk7XHJcbiAgdXNlck5hbWVJbnB1dC52YWx1ZSA9IHVzZXIubmFtZTtcclxuICB1c2VyRGVzY3JpcHRpb25JbnB1dC52YWx1ZSA9IHVzZXIuam9iO1xyXG4gIHByb2ZpbGVFZGl0UG9wdXAub3BlbigpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBoYW5kbGVFZGl0UHJvZmlsZVN1Ym1pdChpbnB1dFZhbHVlcykge1xyXG4gIHVzZXJJbmZvLnNldFVzZXJJbmZvKGlucHV0VmFsdWVzKTtcclxuICBwcm9maWxlRWRpdFBvcHVwLmNsb3NlKCk7XHJcbn1cclxuXHJcbi8vIEFkZCBDYXJkIE1vZGFsXHJcbmNvbnN0IGFkZENhcmRQb3B1cCA9IG5ldyBQb3B1cFdpdGhGb3JtKFwiI25ldy1jYXJkLW1vZGFsXCIsIGhhbmRsZUFkZENhcmRTdWJtaXQpO1xyXG5hZGRDYXJkUG9wdXAuc2V0RXZlbnRMaXN0ZW5lcnMoKTtcclxuYWRkQ2FyZEJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4ge1xyXG4gIGFkZENhcmRGb3JtVmFsaWRhdG9yLnJlc2V0VmFsaWRhdGlvbigpO1xyXG4gIGFkZENhcmRQb3B1cC5vcGVuKCk7XHJcbn0pO1xyXG5cclxuZnVuY3Rpb24gaGFuZGxlQWRkQ2FyZFN1Ym1pdChpbnB1dFZhbHVlcykge1xyXG4gIGFwaS5hZGRDYXJkKGlucHV0VmFsdWVzKS50aGVuKChyZXMpID0+IHtcclxuICAgIGNvbnN0IG5ld0NhcmQgPSBjcmVhdGVDYXJkKHJlcyk7XHJcbiAgICBzZWN0aW9uLmFkZEl0ZW0obmV3Q2FyZCk7XHJcbiAgICBhZGRDYXJkUG9wdXAuY2xvc2UoKTtcclxuICB9KTtcclxufVxyXG5cclxuLy8gRk9STSBWQUxJREFUSU9OXHJcblxyXG5jb25zdCBlZGl0UHJvZmlsZUZvcm1WYWxpZGF0b3IgPSBuZXcgRm9ybVZhbGlkYXRvcihcclxuICB2YWxpZGF0aW9uU2V0dGluZ3MsXHJcbiAgcHJvZmlsZUVkaXRGb3JtXHJcbik7XHJcbmVkaXRQcm9maWxlRm9ybVZhbGlkYXRvci5lbmFibGVWYWxpZGF0aW9uKCk7XHJcblxyXG5jb25zdCBhZGRDYXJkRm9ybVZhbGlkYXRvciA9IG5ldyBGb3JtVmFsaWRhdG9yKHZhbGlkYXRpb25TZXR0aW5ncywgYWRkQ2FyZEZvcm0pO1xyXG5hZGRDYXJkRm9ybVZhbGlkYXRvci5lbmFibGVWYWxpZGF0aW9uKCk7XHJcbiIsImV4cG9ydCBkZWZhdWx0IGNsYXNzIEFwaSB7XHJcbiAgY29uc3RydWN0b3IoeyBiYXNlVXJsLCBhdXRoVG9rZW4gfSkge1xyXG4gICAgdGhpcy5fYmFzZVVybCA9IGJhc2VVcmw7XHJcbiAgICB0aGlzLl9hdXRoVG9rZW4gPSBhdXRoVG9rZW47XHJcbiAgfVxyXG5cclxuICBnZXRDYXJkTGlzdCgpIHtcclxuICAgIHJldHVybiBmZXRjaChgJHt0aGlzLl9iYXNlVXJsfS9jYXJkc2AsIHtcclxuICAgICAgaGVhZGVyczoge1xyXG4gICAgICAgIGF1dGhvcml6YXRpb246IHRoaXMuX2F1dGhUb2tlbixcclxuICAgICAgfSxcclxuICAgIH0pXHJcbiAgICAgIC50aGVuKChyZXMpID0+XHJcbiAgICAgICAgcmVzLm9rID8gcmVzLmpzb24oKSA6IFByb21pc2UucmVqZWN0KGBFcnJvcjogJHtyZXMuc3RhdHVzfWApXHJcbiAgICAgIClcclxuICAgICAgLmNhdGNoKChlcnIpID0+IHtcclxuICAgICAgICBjb25zb2xlLmVycm9yKGVycik7XHJcbiAgICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgZ2V0VXNlckluZm8oKSB7XHJcbiAgICByZXR1cm4gZmV0Y2goYCR7dGhpcy5fYmFzZVVybH0vdXNlcnMvbWVgLCB7XHJcbiAgICAgIGhlYWRlcnM6IHtcclxuICAgICAgICBhdXRob3JpemF0aW9uOiB0aGlzLl9hdXRoVG9rZW4sXHJcbiAgICAgIH0sXHJcbiAgICB9KVxyXG4gICAgICAudGhlbigocmVzKSA9PlxyXG4gICAgICAgIHJlcy5vayA/IHJlcy5qc29uKCkgOiBQcm9taXNlLnJlamVjdChgRXJyb3I6ICR7cmVzLnN0YXR1c31gKVxyXG4gICAgICApXHJcbiAgICAgIC5jYXRjaCgoZXJyKSA9PiB7XHJcbiAgICAgICAgY29uc29sZS5lcnJvcihlcnIpO1xyXG4gICAgICB9KTtcclxuICB9XHJcblxyXG4gIC8vICAgZ2V0QXBwSW5mbygpIFtPcHRpb25hbF1cclxuXHJcbiAgYWRkQ2FyZCh7IG5hbWUsIGxpbmsgfSkge1xyXG4gICAgcmV0dXJuIGZldGNoKGAke3RoaXMuX2Jhc2VVcmx9L2NhcmRzYCwge1xyXG4gICAgICBtZXRob2Q6IFwiUE9TVFwiLFxyXG4gICAgICBoZWFkZXJzOiB7XHJcbiAgICAgICAgYXV0aG9yaXphdGlvbjogdGhpcy5fYXV0aFRva2VuLFxyXG4gICAgICAgIFwiQ29udGVudC1UeXBlXCI6IFwiYXBwbGljYXRpb24vanNvblwiLFxyXG4gICAgICB9LFxyXG4gICAgICBib2R5OiBKU09OLnN0cmluZ2lmeSh7XHJcbiAgICAgICAgbmFtZSxcclxuICAgICAgICBsaW5rLFxyXG4gICAgICB9KSxcclxuICAgIH0pXHJcbiAgICAgIC50aGVuKChyZXMpID0+XHJcbiAgICAgICAgcmVzLm9rID8gcmVzLmpzb24oKSA6IFByb21pc2UucmVqZWN0KGBFcnJvcjogJHtyZXMuc3RhdHVzfWApXHJcbiAgICAgIClcclxuICAgICAgLmNhdGNoKChlcnIpID0+IHtcclxuICAgICAgICBjb25zb2xlLmVycm9yKGVycik7XHJcbiAgICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgcmVtb3ZlQ2FyZChjYXJkSUQpIHtcclxuICAgIHJldHVybiBmZXRjaChgJHt0aGlzLl9iYXNlVXJsfS9jYXJkcy8ke2NhcmRJRH1gLCB7XHJcbiAgICAgIG1ldGhvZDogXCJERUxFVEVcIixcclxuICAgICAgaGVhZGVyczoge1xyXG4gICAgICAgIGF1dGhvcml6YXRpb246IHRoaXMuX2F1dGhUb2tlbixcclxuICAgICAgICBcIkNvbnRlbnQtVHlwZVwiOiBcImFwcGxpY2F0aW9uL2pzb25cIixcclxuICAgICAgfSxcclxuICAgIH0pXHJcbiAgICAgIC50aGVuKChyZXMpID0+XHJcbiAgICAgICAgcmVzLm9rID8gcmVzLmpzb24oKSA6IFByb21pc2UucmVqZWN0KGBFcnJvcjogJHtyZXMuc3RhdHVzfWApXHJcbiAgICAgIClcclxuICAgICAgLmNhdGNoKChlcnIpID0+IHtcclxuICAgICAgICBjb25zb2xlLmVycm9yKGVycik7XHJcbiAgICAgIH0pO1xyXG4gIH1cclxufVxyXG4iLCJleHBvcnQgZGVmYXVsdCBjbGFzcyBVc2VySW5mbyB7XHJcbiAgY29uc3RydWN0b3Ioc2VsZWN0b3JzKSB7XHJcbiAgICB0aGlzLm5hbWVFbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihzZWxlY3RvcnMudXNlck5hbWVTZWxlY3Rvcik7XHJcbiAgICB0aGlzLmpvYkVsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHNlbGVjdG9ycy51c2VyVGl0bGVTZWxlY3Rvcik7XHJcbiAgfVxyXG5cclxuICBnZXRVc2VySW5mbygpIHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgIG5hbWU6IHRoaXMubmFtZUVsZW1lbnQudGV4dENvbnRlbnQsXHJcbiAgICAgIGpvYjogdGhpcy5qb2JFbGVtZW50LnRleHRDb250ZW50LFxyXG4gICAgfTtcclxuICB9XHJcblxyXG4gIHNldFVzZXJJbmZvKHVzZXIpIHtcclxuICAgIHRoaXMubmFtZUVsZW1lbnQudGV4dENvbnRlbnQgPSB1c2VyLm5hbWU7XHJcbiAgICB0aGlzLmpvYkVsZW1lbnQudGV4dENvbnRlbnQgPSB1c2VyLmpvYjtcclxuICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgUG9wdXAgfSBmcm9tIFwiLi9Qb3B1cC5qc1wiO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUG9wdXBXaXRoSW1hZ2UgZXh0ZW5kcyBQb3B1cCB7XHJcbiAgY29uc3RydWN0b3IocG9wdXBTZWxlY3Rvcikge1xyXG4gICAgc3VwZXIocG9wdXBTZWxlY3Rvcik7XHJcbiAgICB0aGlzLl9jb250YWluZXJJbWFnZSA9IHRoaXMuX3BvcHVwRWxlbWVudC5xdWVyeVNlbGVjdG9yKFxyXG4gICAgICBcIi5tb2RhbF9fY29udGFpbmVyLWltYWdlXCJcclxuICAgICk7XHJcbiAgICB0aGlzLl9jb250YWluZXJJbWFnZVRpdGxlID0gdGhpcy5fcG9wdXBFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXHJcbiAgICAgIFwiLm1vZGFsX19pbWFnZV90aXRsZVwiXHJcbiAgICApO1xyXG4gIH1cclxuXHJcbiAgb3Blbih7IG5hbWUsIGxpbmsgfSkge1xyXG4gICAgY29uc3QgaW1hZ2UgPSB0aGlzLl9jb250YWluZXJJbWFnZS5xdWVyeVNlbGVjdG9yKFwiLm1vZGFsX19pbWFnZVwiKTtcclxuICAgIHRoaXMuX2NvbnRhaW5lckltYWdlVGl0bGUudGV4dENvbnRlbnQgPSBuYW1lO1xyXG4gICAgaW1hZ2UuYWx0ID0gbmFtZTtcclxuICAgIGltYWdlLnNyYyA9IGxpbms7XHJcbiAgICBzdXBlci5vcGVuKCk7XHJcbiAgfVxyXG59XHJcbiJdLCJuYW1lcyI6WyJTZWN0aW9uIiwiY29uc3RydWN0b3IiLCJfcmVmIiwiY29udGFpbmVyIiwiaXRlbXMiLCJyZW5kZXJlciIsInRoaXMiLCJfaXRlbXMiLCJfcmVuZGVyZXIiLCJfY29udGFpbmVyIiwicmVuZGVySXRlbXMiLCJjb25zb2xlIiwibG9nIiwiZm9yRWFjaCIsIml0ZW0iLCJhZGRJdGVtIiwicHJlcGVuZCIsIkNhcmQiLCJjYXJkU2VsZWN0b3IiLCJoYW5kbGVJbWFnZUNsaWNrIiwiaGFuZGxlRGVsZXRlQ2FyZENsaWNrIiwibmFtZSIsImxpbmsiLCJfaWQiLCJfbmFtZSIsIl9saW5rIiwiX2NhcmRTZWxlY3RvciIsIl9jYXJkRWxlbWVudCIsIl9nZXRUZW1wbGF0ZSIsIl9jYXJkTGlrZUJ1dHRvbiIsInF1ZXJ5U2VsZWN0b3IiLCJfY2FyZERlbGV0ZUJ1dHRvbiIsIl9oYW5kbGVEZWxldGVDYXJkQ2xpY2siLCJfY2FyZEltYWdlIiwiX2hhbmRsZUltYWdlQ2xpY2siLCJfc2V0RXZlbnRMaXN0ZW5lcnMiLCJnZXRJZCIsImFkZEV2ZW50TGlzdGVuZXIiLCJfaGFuZGxlTGlrZUljb24iLCJjbGFzc0xpc3QiLCJ0b2dnbGUiLCJfaGFuZGxlRGVsZXRlQ2FyZCIsInJlbW92ZSIsImRvY3VtZW50IiwiY29udGVudCIsImNsb25lTm9kZSIsImdldFZpZXciLCJzcmMiLCJhbHQiLCJ0ZXh0Q29udGVudCIsIlBvcHVwIiwicG9wdXBTZWxlY3RvciIsIl9wb3B1cEVsZW1lbnQiLCJfcG9wdXBDbG9zZUJ1dHRvbiIsIm9wZW4iLCJhZGQiLCJfaGFuZGxlRXNjQ2xvc2UiLCJjbG9zZSIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJldmVudCIsImtleSIsInNldEV2ZW50TGlzdGVuZXJzIiwiZXZ0IiwidGFyZ2V0IiwiY29udGFpbnMiLCJQb3B1cFdpdGhGb3JtIiwiaGFuZGxlRm9ybVN1Ym1pdCIsInN1cGVyIiwiX2Zvcm0iLCJfaGFuZGxlRm9ybVN1Ym1pdCIsIl9nZXRJbnB1dFZhbHVlcyIsInZhbHVlcyIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJpbnB1dCIsInZhbHVlIiwiX3N1Ym1pdEhhbmRsZXIiLCJwcmV2ZW50RGVmYXVsdCIsImlucHV0VmFsdWVzIiwicmVzZXQiLCJzZXR0aW5ncyIsImZvcm1FbGVtZW50IiwiX2Zvcm1TZWxlY3RvciIsImZvcm1TZWxlY3RvciIsImlucHV0U2VsZWN0b3IiLCJfc3VibWl0QnV0dG9uU2VsZWN0b3IiLCJzdWJtaXRCdXR0b25TZWxlY3RvciIsIl9pbmFjdGl2ZUJ1dHRvbkNsYXNzIiwiaW5hY3RpdmVCdXR0b25DbGFzcyIsIl9pbnB1dEVycm9yQ2xhc3MiLCJfZXJyb3JDbGFzcyIsIl9zaG93SW5wdXRFcnJvciIsImlucHV0RWxlbWVudCIsImVycm9yTWVzc2FnZUVsZW1lbnQiLCJpZCIsInZhbGlkYXRpb25NZXNzYWdlIiwiX2hpZGVJbnB1dEVycm9yIiwiX2NoZWNrSW5wdXRWYWxpZGl0eSIsInZhbGlkaXR5IiwidmFsaWQiLCJfaGFzSW52YWxpZElucHV0IiwiaW5wdXRFbGVtZW50cyIsIl9pbnB1dEVsZW1lbnRzIiwiZXZlcnkiLCJfZGlzYWJsZUJ1dHRvbiIsIl9zdWJtaXRCdXR0b24iLCJkaXNhYmxlZCIsIl9lbmFibGVCdXR0b24iLCJfdG9nZ2xlQnV0dG9uU3RhdGUiLCJyZXNldFZhbGlkYXRpb24iLCJfaW5wdXRTZWxlY3RvciIsImVuYWJsZVZhbGlkYXRpb24iLCJ2YWxpZGF0aW9uU2V0dGluZ3MiLCJpbnB1dEVycm9yQ2xhc3MiLCJlcnJvckNsYXNzIiwib3B0aW9ucyIsInN1Ym1pdEJ1dHRvbiIsIl9yZWYyIiwiaGlkZUlucHV0RXJyb3IiLCJzaG93SW5wdXRFcnJvciIsImNoZWNrSW5wdXRWYWxpZGl0eSIsInZhbGlkYXRpb25Db25maWciLCJpc0Zvcm1WYWxpZCIsImNoZWNrRm9ybVZhbGlkaXR5IiwiZW5hYmxlQnV0dG9uIiwiZGlzYWJsZUJ1dHRvbiIsInRvZ2dsZUJ1dHRvblN0YXRlIiwiYWRkQ2FyZEZvcm0iLCJ1c2VyTmFtZUlucHV0IiwidXNlckRlc2NyaXB0aW9uSW5wdXQiLCJjYXJkc0xpc3QiLCJwcm9maWxlRWRpdEJ1dHRvbiIsImFkZENhcmRCdXR0b24iLCJwcm9maWxlRWRpdEZvcm0iLCJhcGkiLCJiYXNlVXJsIiwiYXV0aFRva2VuIiwiX2Jhc2VVcmwiLCJfYXV0aFRva2VuIiwiZ2V0Q2FyZExpc3QiLCJmZXRjaCIsImhlYWRlcnMiLCJhdXRob3JpemF0aW9uIiwidGhlbiIsInJlcyIsIm9rIiwianNvbiIsIlByb21pc2UiLCJyZWplY3QiLCJzdGF0dXMiLCJjYXRjaCIsImVyciIsImVycm9yIiwiZ2V0VXNlckluZm8iLCJhZGRDYXJkIiwibWV0aG9kIiwiYm9keSIsIkpTT04iLCJzdHJpbmdpZnkiLCJyZW1vdmVDYXJkIiwiY2FyZElEIiwic2VjdGlvbiIsImNyZWF0ZUNhcmQiLCJjYXJkRGF0YSIsImNhcmQiLCJoYW5kbGVDYXJkQ2xpY2siLCJwcmV2aWV3SW1hZ2VQb3B1cCIsInVzZXJJbmZvIiwic2VsZWN0b3JzIiwibmFtZUVsZW1lbnQiLCJ1c2VyTmFtZVNlbGVjdG9yIiwiam9iRWxlbWVudCIsInVzZXJUaXRsZVNlbGVjdG9yIiwiam9iIiwic2V0VXNlckluZm8iLCJ1c2VyIiwiYWJvdXQiLCJfY29udGFpbmVySW1hZ2UiLCJfY29udGFpbmVySW1hZ2VUaXRsZSIsImltYWdlIiwicHJvZmlsZUVkaXRQb3B1cCIsImhhbmRsZVByb2ZpbGVFZGl0Q2xpY2siLCJhZGRDYXJkUG9wdXAiLCJuZXdDYXJkIiwiYWRkQ2FyZEZvcm1WYWxpZGF0b3IiLCJGb3JtVmFsaWRhdG9yIl0sInNvdXJjZVJvb3QiOiIifQ==