!function(){"use strict";class e{constructor(e,t){let{items:r,renderer:s}=e;this._items=r,this._renderer=s,this._container=t}renderItems(){console.log(this._items),this._items.forEach((e=>{this._renderer(e)}))}addItem(e){this._container.prepend(e)}}class t{constructor(e,t,r,s){let{name:n,link:o,_id:i}=e;this._name=n,this._link=o,this._id=i,this._cardSelector=t,this._cardElement=this._getTemplate(),this._cardLikeButton=this._cardElement.querySelector(".card__like-button"),this._cardDeleteButton=this._cardElement.querySelector(".card__delete-button"),this._handleDeleteCardClick=s,this._cardImage=this._cardElement.querySelector(".card__image"),this._handleImageClick=r,this._setEventListeners()}getId(){return this._id}_setEventListeners(){this._cardLikeButton.addEventListener("click",(()=>{this._handleLikeIcon()})),this._cardDeleteButton.addEventListener("click",(()=>{this._handleDeleteCardClick(this._id)})),this._cardImage.addEventListener("click",(()=>{this._handleImageClick({name:this._name,link:this._link})}))}_handleLikeIcon(){this._cardLikeButton.classList.toggle("card__like-button_active")}_handleDeleteCard(){this._cardElement.remove()}_getTemplate(){return document.querySelector(this._cardSelector).content.querySelector(".card").cloneNode(!0)}getView(){return this._cardImage.src=this._link,this._cardImage.alt=this._name,this._cardElement.querySelector(".card__title").textContent=this._name,this._cardElement}}class r{constructor(e){this._popupElement=document.querySelector(e),this._popupCloseButton=this._popupElement.querySelector(".modal__close")}open(){this._popupElement.classList.add("modal_opened"),document.addEventListener("keydown",this._handleEscClose)}close(){this._popupElement.classList.remove("modal_opened"),document.removeEventListener("keydown",this._handleEscClose)}_handleEscClose=e=>{"Escape"===e.key&&this.close()};setEventListeners(){this._popupCloseButton.addEventListener("click",(()=>{this.close()})),this._popupElement.addEventListener("mousedown",(e=>{e.target.classList.contains("modal")&&this.close()}))}}class s extends r{constructor(e,t){super(e),this._form=this._popupElement.querySelector(".modal__form"),this._handleFormSubmit=t}_getInputValues(){const e={};return this._form.querySelectorAll(".modal__input").forEach((t=>{e[t.name]=t.value})),e}setEventListeners(){super.setEventListeners(),this._form.addEventListener("submit",this._submitHandler)}_submitHandler=e=>{e.preventDefault();const t=this._getInputValues();this._handleFormSubmit(t)};close(){super.close(),this._form.reset()}}var n=class{constructor(e,t){this._formSelector=e.formSelector,this.inputSelector=e.inputSelector,this._submitButtonSelector=e.submitButtonSelector,this._inactiveButtonClass=e.inactiveButtonClass,this._inputErrorClass=e._inputErrorClass,this._errorClass=e._errorClass,this._form=t}_showInputError(e){const t=this._form.querySelector(`#${e.id}-error`);e.classList.add(this._inputErrorClass),t.textContent=e.validationMessage,t.classList.add(this._errorClass)}_hideInputError(e){const t=this._form.querySelector(`#${e.id}-error`);e.classList.remove(this._inputErrorClass),t.textContent="",t.classList.remove(this._errorClass)}_checkInputValidity(e){if(!e.validity.valid)return this._showInputError(e);this._hideInputError(e)}_hasInvalidInput(e){return!this._inputElements.every((e=>e.validity.valid))}_disableButton(){this._submitButton.disabled=!0,this._submitButton.classList.add(this._inactiveButtonClass)}_enableButton(){this._submitButton.disabled=!1,this._submitButton.classList.remove(this._inactiveButtonClass)}_toggleButtonState(){if(this._hasInvalidInput())return this._disableButton();this._enableButton()}resetValidation(){this._inputElements.forEach((e=>{this._hideInputError(e)})),this._disableButton()}_setEventListeners(){this._inputElements=[...this._form.querySelectorAll(this._inputSelector)],this._submitButton=this._form.querySelector(this._submitButtonSelector),this._inputElements.forEach((e=>{e.addEventListener("input",(()=>{this._checkInputValidity(e),this._toggleButtonState()}))}))}enableValidation(){this._form.addEventListener("submit",(e=>{e.preventDefault()})),this._setEventListeners()}};const o={formSelector:".modal__form",inputSelector:".modal__input",submitButtonSelector:".modal__button",inactiveButtonClass:"modal__button_disabled",inputErrorClass:"modal__error",errorClass:"modal__error_visible"};var i;i=o,[...document.querySelectorAll(i.formSelector)].forEach((e=>{e.addEventListener("submit",(e=>{e.preventDefault()})),function(e,t){const{inputSelector:r,submitButtonSelector:s}=t,n=[...e.querySelectorAll(r)],o=e.querySelector(s);n.forEach((r=>{r.addEventListener("input",(s=>{!function(e,t,r){t.validity.valid?function(e,t,r){let{inputErrorClass:s,errorClass:n}=r;const o=e.querySelector(`#${t.id}-error`);t.classList.remove(s),o&&(o.textContent="",o.classList.remove(n))}(e,t,r):function(e,t,r){let{inputErrorClass:s,errorClass:n}=r;const o=e.querySelector(`#${t.id}-error`);t.classList.add(s),o&&(o.textContent=t.validationMessage,o.classList.add(n))}(e,t,r)}(e,r,t),function(e,t,r){const{inactiveButtonClass:s}=r,n=(e=>e.every((e=>e.validity.valid)))(e);n?function(e,t){e.classList.remove(t),e.disabled=!1}(t,s):function(e,t){e.classList.add(t),e.disabled=!0}(t,s)}(n,o,t)}))}))}(e,i)}));const a=document.querySelector("#new-card-modal").querySelector(".modal__form"),l=document.querySelector("#profile-title-input"),c=document.querySelector("#profile-description-input"),u=document.querySelector(".cards__list"),d=document.querySelector(".profile__edit-button"),h=document.querySelector(".profile__add-button"),_=(document.querySelector(".modal__input-title"),document.querySelector(".modal__input-link"),document.querySelector("#new-card-modal"),document.querySelector("#profile-edit-modal").querySelector(".modal__form")),m=new class{constructor(e){let{baseUrl:t,authToken:r}=e;this._baseUrl=t,this._authToken=r}getCardList(){return fetch(`${this._baseUrl}/cards`,{headers:{authorization:this._authToken}}).then((e=>e.ok?e.json():Promise.reject(`Error: ${e.status}`))).catch((e=>{console.error(e)}))}getUserInfo(){return fetch(`${this._baseUrl}/users/me`,{headers:{authorization:this._authToken}}).then((e=>e.ok?e.json():Promise.reject(`Error: ${e.status}`))).catch((e=>{console.error(e)}))}addCard(e){let{name:t,link:r}=e;return fetch(`${this._baseUrl}/cards`,{method:"POST",headers:{authorization:this._authToken,"Content-Type":"application/json"},body:JSON.stringify({name:t,link:r})}).then((e=>e.ok?e.json():Promise.reject(`Error: ${e.status}`))).catch((e=>{console.error(e)}))}removeCard(e){return fetch(`${this._baseUrl}/cards/${e}`,{method:"DELETE",headers:{authorization:this._authToken,"Content-Type":"application/json"}}).then((e=>e.ok?e.json():Promise.reject(`Error: ${e.status}`))).catch((e=>{console.error(e)}))}updateProfilePicture(e){return fetch(`${this._baseUrl}/users/me/avatar`,{method:"PATCH",headers:{authorization:this._authToken,"Content-Type":"application/json"},body:JSON.stringify({avatar:e})}).then((e=>e.ok?e.json():Promise.reject(`Error: ${e.status}`))).catch((e=>{console.error(e)}))}}({baseUrl:"https://around-api.en.tripleten-services.com/v1",authToken:"92f7ebfa-9e8e-4fb8-b0a3-1cdaa15ccbe0"});let p;function E(e){const r=new t(e,"#card-template",f,(e=>function(e,t){m.removeCard(e).then((e=>{t._handleDeleteCard()}))}(e,r)));return r.getView()}function f(e){S.open(e)}m.getCardList().then((t=>{console.log(t),p=new e({items:t,renderer:e=>{const t=E(e);p.addItem(t)}},u),p.renderItems()}));const v=new class{constructor(e){this.nameElement=document.querySelector(e.userNameSelector),this.jobElement=document.querySelector(e.userTitleSelector)}getUserInfo(){return{name:this.nameElement.textContent,job:this.jobElement.textContent}}setUserInfo(e){this.nameElement.textContent=e.name,this.jobElement.textContent=e.job}}({userNameSelector:".profile__title",userTitleSelector:".profile__description"});m.getUserInfo().then((e=>{v.setUserInfo({name:e.name,job:e.about})})),document.querySelector("#profile-picture-input").addEventListener("change",(e=>{e.target.files[0]&&m.updateProfilePicture(newProfilePictureUrl).then((e=>{console.log("Profile picture updated successfully")})).catch((e=>{console.error("Error updating profile picture:",e)}))}));const S=new class extends r{constructor(e){super(e),this._containerImage=this._popupElement.querySelector(".modal__container-image"),this._containerImageTitle=this._popupElement.querySelector(".modal__image_title")}open(e){let{name:t,link:r}=e;const s=this._containerImage.querySelector(".modal__image");this._containerImageTitle.textContent=t,s.alt=t,s.src=r,super.open()}}("#image-modal",(function(e){S.open(e)}));S.setEventListeners();const b=new s("#profile-edit-modal",(function(e){v.setUserInfo(e),b.close()}));b.setEventListeners(),d.addEventListener("click",(()=>{!function(){const e=v.getUserInfo();l.value=e.name,c.value=e.job,b.open()}()}));const y=new s("#new-card-modal",(function(e){m.addCard(e).then((e=>{const t=E(e);p.addItem(t),y.close()}))}));y.setEventListeners(),h.addEventListener("click",(()=>{C.resetValidation(),y.open()})),new n(o,_).enableValidation();const C=new n(o,a);C.enableValidation()}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,