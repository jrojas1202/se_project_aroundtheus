!function(){"use strict";class e{constructor(e,t){this._formElement=e,this._inputSelector=t.inputSelector,this._submitButtonSelector=t.submitButtonSelector,this._inactiveButtonClass=t.inactiveButtonClass,this._inputErrorClass=t.inputErrorClass,this._errorClass=t.errorClass}_showInputError(e){const t=this._formElement.querySelector(`#${e.id}-error`);e.classList.add(this._inputErrorClass),t.textContent=e.validationMessage,t.classList.add(this._errorClass)}_hideInputError(e){const t=this._formElement.querySelector(`#${e.id}-error`);e.classList.remove(this._inputErrorClass),t.textContent="",t.classList.remove(this._errorClass)}_checkInputValidity(e){e.validity.valid?this._hideInputError(e):this._showInputError(e)}_checkFormValidity=()=>this._inputElements.every((e=>e.validity.valid));_toggleButtonState(){this._checkFormValidity()?(this._submitButton.classList.remove(this._inactiveButtonClass),this._submitButton.disabled=!1):(this._submitButton.classList.add(this._inactiveButtonClass),this._submitButton.disabled=!0)}_setEventListeners(){this._inputElements=[...this._formElement.querySelectorAll(this._inputSelector)],this._submitButton=this._formElement.querySelector(this._submitButtonSelector),this._inputElements.forEach((e=>{e.addEventListener("input",(()=>{this._checkInputValidity(e),this._toggleButtonState(this._inputElements,this._submitButton)}))}))}resetValidation(){this._toggleButtonState(),this._inputElements.forEach((e=>{this._hideInputError(e)}))}enableValidation(){this._formElement.addEventListener("submit",(e=>{e.preventDefault()})),this._setEventListeners(this._formElement)}}class t{constructor(e){let{data:t,cardSelector:s,handlePreviewImage:r,handleLikeCard:n,currentUserId:i,handleDeleteCard:o,owner:a}=e;this._name=t.name,this._link=t.link,this._isLiked=!!t.isLiked,this._id=t._id,this._cardSelector=s,this._handleImageClick=r,this._handleLikeCard=n,this._currentUserId=i,this._owner=t.owner._id,this._handleDeleteCard=o,console.log(this._owner)}_getTemplate(){return document.querySelector(this._cardSelector).content.firstElementChild.cloneNode(!0)}deleteClick(){this._element.remove()}updateLikes(e){this._isLiked=e,this.renderLikes()}renderLikes(){this.isLiked()?this.likeButton.classList.add("card__like-button_active"):this.likeButton.classList.remove("card__like-button_active")}isLiked(){return this._isLiked}_checkIdForDelete(){this._owner===this._currentUserId?this.addTrash():this.removeTrash()}addTrash(){this.cardTrashButton.classList.remove("card__trash-button_active")}removeTrash(){this.cardTrashButton.classList.add("card__trash-button_active")}_setEventListeners(){this.likeButton.addEventListener("click",(()=>this._handleLikeCard(this.isLiked()))),this.cardTrashButton.addEventListener("click",(()=>{this._handleDeleteCard(this._id)})),this.cardImage.addEventListener("click",(()=>{this._handleImageClick()}))}generateCard(){this._element=this._getTemplate(),this.likeButton=this._element.querySelector(".card__like-button"),this.cardTrashButton=this._element.querySelector(".card__trash-button"),this.cardImage=this._element.querySelector(".card__image");const e=this._element.querySelector(".card__title");return this.cardImage.src=this._link,this.cardImage.alt=this._name,e.textContent=this._name,this._cardLikes=this._element.querySelector(".card__likes-counter"),this.renderLikes(),this._setEventListeners(),this._checkIdForDelete(),this._element}}class s{constructor(e){let{popupSelector:t}=e;this._popupElement=document.querySelector(t),this._handleEscClose=this._handleEscClose.bind(this)}open(){this._popupElement.classList.add("popup_opened"),document.addEventListener("keydown",this._handleEscClose)}close(){this._popupElement.classList.remove("popup_opened"),document.removeEventListener("keydown",this._handleEscClose)}_handleEscClose(e){"Escape"===e.key&&this.close()}setEventListeners(){this._popupElement.addEventListener("mousedown",(e=>{(e.target.classList.contains("popup")||e.target.classList.contains("popup__closebutton"))&&this.close()}))}}var r=class extends s{constructor(e,t){super({popupSelector:e}),this._popupForm=this._popupElement.querySelector(".popup__form"),this._handleFormSubmit=t,this._modalSaveButton=this._popupElement.querySelector(".popup__button"),this._saveButtonText=this._modalSaveButton.textContent}_getInputValue(){const e=this._popupForm.querySelectorAll(".popup__input"),t={};return e.forEach((e=>{t[e.name]=e.value})),t}setEventListeners(){super.setEventListeners(),this._popupForm.addEventListener("submit",(()=>this._handleFormSubmit(this._getInputValue())))}renderLoading(e){this._modalSaveButton.textContent=e?"Saving...":this._saveButtonText}close(){this._popupForm.reset(),super.close()}};class n{constructor(e,t){let{items:s,renderer:r}=e;this._items=s,this._renderer=r,this._container=document.querySelector(t)}renderItems(){this._items.forEach((e=>{this._renderer(e)}))}addItem(e){this._container.prepend(e)}}const i=document.querySelector("#modal"),o=document.querySelector(".profile__edit-button"),a=(i.querySelector("#modal-closebutton"),i.querySelector("#modal-form")),l=document.querySelector("#popup-name"),c=document.querySelector("#popup-description"),d=document.querySelector("#add-popup"),h=document.querySelector(".profile__add-button"),u=d.querySelector("#add-popupform"),_=(document.querySelector("#preview-popup").querySelector("#popup-closebutton"),document.querySelector("#avi-popupform")),p={inputSelector:".popup__input",submitButtonSelector:".popup__button",inactiveButtonClass:"popup__button_disabled",inputErrorClass:"popup__input_type_error",errorClass:"popup__error_visible"},m=new class{constructor(e){let{nameSelector:t,jobSelector:s,avatarSelector:r}=e;this._nameEl=document.querySelector(t),this._jobEl=document.querySelector(s),this._avatarElement=document.querySelector(r)}getUserInfo(){return{name:this._nameEl.textContent,job:this._jobEl.textContent,avatar:this._avatarELement}}setAvatarInfo(e){this._avatarElement.src=e}setUserInfo(e){let{name:t,job:s}=e;this._nameEl.textContent=t,this._jobEl.textContent=s}}({nameSelector:".profile__title",jobSelector:".profile__description",avatarSelector:".profile__image"}),v=new class{constructor(e){let{baseUrl:t,headers:s}=e;this._baseUrl=t,this._headers=s}_checkResponse(e){return e.ok?e.json():Promise.reject(`Error ${e.status}`)}getUserInfo(){return fetch(`${this._baseUrl}/users/me`,{method:"GET",headers:this._headers}).then(this._checkResponse)}getAppInfo(){return Promise.all([this.getUserInfo(),this.initialCards()])}initialCards(){return fetch(`${this._baseUrl}/cards`,{method:"GET",headers:this._headers}).then(this._checkResponse)}editProfile(e){let{name:t,description:s}=e;return fetch(`${this._baseUrl}/users/me`,{method:"PATCH",headers:this._headers,body:JSON.stringify({name:t,about:s})}).then(this._checkResponse)}addNewCard(e){let{name:t,link:s}=e;return fetch(`${this._baseUrl}/cards`,{method:"post",headers:this._headers,body:JSON.stringify({name:t,link:s})}).then(this._checkResponse)}cardLikes(e){return fetch(`${this._baseUrl}/cards/${e}`,{method:"PUT",headers:this._headers}).then(this._checkResponse)}deleteCard(e){return fetch(`${this._baseUrl}/cards/${e}`,{method:"DELETE",headers:this._headers}).then(this._checkResponse)}addLike(e){return fetch(`${this._baseUrl}/cards/${e}/likes`,{method:"PUT",headers:this._headers,body:JSON.stringify({isLiked:!0})}).then((e=>e.ok?e.json():Promise.reject(`Error: ${e.status}`)))}removeLike(e){return fetch(`${this._baseUrl}/cards/${e}/likes`,{method:"DELETE",headers:this._headers}).then((e=>e.ok?e.json():Promise.reject(`Error: ${e.status}`)))}updateProfilePicture(e){return fetch(`${this._baseUrl}/users/me/avatar`,{method:"PATCH",headers:this._headers,body:JSON.stringify(e)}).then(this._checkResponse)}}({baseUrl:"https://around-api.en.tripleten-services.com/v1",headers:{authorization:"92f7ebfa-9e8e-4fb8-b0a3-1cdaa15ccbe0","Content-Type":"application/json"}});let E,L;function b(e){const s=new t({data:e,cardSelector:"#card-template",currentUserId:L,handlePreviewImage:()=>{q.open(e)},handleLikeCard:t=>{t?v.removeLike(e._id).then((e=>{s.updateLikes(e.isLiked)})).catch((e=>{console.log(e)})):v.addLike(e._id).then((e=>{s.updateLikes(e.isLiked)})).catch((e=>{console.log(e)}))},handleDeleteCard:e=>{y.open(),y.setSubmitAction((()=>{y.renderLoading(!0),v.deleteCard(e).then((()=>{s.deleteClick(),y.close()})).catch((e=>{console.log(e)})).finally((()=>{y.renderLoading(!1)}))}))}});return s.generateCard()}v.getAppInfo().then((e=>{let[t,s]=e;L=t._id,m.setUserInfo({name:t.name,job:t.about}),m.setAvatarInfo(t.avatar),E=new n({items:s,renderer:e=>{const t=b(e);E.addItem(t)}},".cards__list"),E.renderItems()})).catch((e=>{console.log(e)}));const S=new e(u,p);S.enableValidation();const k=new e(a,p);k.enableValidation();const f=new e(_,p);f.enableValidation();const y=new class extends s{constructor(e){super({popupSelector:e}),this._popupForm=this._popupElement.querySelector(".popup__form"),this._confirmButton=document.querySelector("#delete__button"),this._saveButton=document.querySelector(".popup__button")}setEventListeners(){super.setEventListeners(),this._popupForm.addEventListener("submit",(e=>{e.preventDefault(),this._handleDeleteSubmit()}))}renderLoading(e){this._confirmButton.textContent=e?"Saving...":"yes"}setSubmitAction(e){this._handleDeleteSubmit=e}}("#delete-popup");y.setEventListeners();const g=new r("#modal",(e=>{g.renderLoading(!0),v.editProfile(e).then((()=>{m.setUserInfo({name:e.name,job:e.description}),g.close()})).catch((e=>{console.log(e)})).finally((()=>{g.renderLoading(!1)}))}));g.setEventListeners();const C=new r("#add-popup",(e=>{C.renderLoading(!0),v.addNewCard(e).then((e=>{const t=b(e);E.addItem(t),C.close()})).catch((e=>{console.log(e)})).finally((()=>{C.renderLoading(!1)}))}));C.setEventListeners();const I=new r("#avi-popup",(e=>{I.renderLoading(!0),v.updateProfilePicture(e).then((e=>{m.setAvatarInfo(e.avatar),I.close()})).catch((e=>{console.log(e)})).finally((()=>{I.renderLoading(!1)}))}));I.setEventListeners(),document.querySelector(".profile__image").addEventListener("click",(()=>{I.open(),f.resetValidation()}));const q=new class extends s{constructor(e){super({popupSelector:e}),this._image=document.querySelector("#popup-image"),this._text=document.querySelector("#popup-text")}open(e){let{link:t,name:s}=e;this._image.src=t,this._image.alt=s,this._text.textContent=s,super.open()}}("#preview-popup");q.setEventListeners(),o.addEventListener("click",(function(){const{name:e,job:t}=m.getUserInfo();l.value=e,c.value=t,k.resetValidation(),g.open()})),h.addEventListener("click",(()=>{S.resetValidation(),C.open()}))}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,